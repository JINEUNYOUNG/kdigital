
# k20230425

# Object

1. object타입으로 필드 선언 시 , 상속 받지 않아도 공용으로 사용 가능
2. 자식 객체 → 부모 객체 (upcasting)  → 자식 객체 (downcasting)의 형식으로만 downcasting 가능 

# Generics

***클래스 <T> 인터페이스<T> 여러 개 가능 <A, B, C>***

1. 다양한 타입의 객체를 다루는 메서드나 클래스에 컴파일 시, 타입체크 가능
2. 어떤타입이 저장되어 있는지 알게 됨으로 형변환 할 필요가 없다 
3. 자료형 변수로, 데이터가 아니라 데이터의 타입을 받는다
4. ***<M extends 클래스***> 
    
    M 자료형의 범위를 제한 할 수 있고 부모 클래스에서 선언하거나 정의한 메소드를 사용 할 수 있다. 상속을 받지 않은 경우 M은 Object로 변환되어 Object 클래스가 기본으로 제공하는 메소드만 사용할 수 O
    
5. GenericPrinter 클래스에서 Material 클래스를 상속 받아 Generic을 구현하면 M에는 Material 클래스를 상속 받은 클래스만 GenericPrinter 클래스에 자료형으로 넘길 수 있고, 

# Thread

- **Thread 클래스를 상속 받아 작성된 멀티 스레드 실행 방법**
1. Thread 클래스를 상속 받아(extends Thread) 멀티 스레드를 작성한 클래스 객체를 만든다. 
    
    (DigitThread digit = new DigitThread();
    
2. Thread 클래스를 상속 받아 작성된 클래스 객체에서 ***start() 메소드***로 멀티 스레드를 실행한다. run()메소드를 override해서 구현 했다고 run을 실행하면 single 스레드로 실행된다. (하나 후에 하나)

- Runnable**인터페이스를 상속 받아 작성된 멀티 스레드 실행 방법**
1. Runnable인터페이스를 구현 받아(implement Runnable) 멀티 스레드를 작성한 클래스 객체를 만든다. 
2. Runnable 인터페이스는 스레드를 실제로 실행하는 기능이 없음 
    
    ⇒ Thread 클래스의 도움을 받아야 함 ⇒ Thread 클래스의 객체를 생성할때 생성자의 인수로 Runnable 인터페이스를 구현받아 멀티스레드를 작성한 클래스 객체를 넘겨준다. 
    
    - runnable 인터페이스 : run이라는 추상메서드만 들어가 있음
3. Thread 클래스 객체에서 start() 메소드를 사용해서 실행한다.

※ run 메서드

## +daemon 스레드

.setDaemon(true) main thread가 종료되면 즉시 종료된다. 지정해주지 않으면 스레드 각자가 알아서 실행된다. 

Thread를 start()하기 전에 thread.setDaemon() 함수로 설정할 수 있다.

## Thread 우선순위

1~10 사이를 지정할 수 있다.

우선 순위가 높은 스레드가 CPU의 할당을 받을 확률이 높다.

비워뒀을 시, MAX : 10    MIN : 1   NORM : 5  가 기본 값이 된다. 

setPriority() 메소드로 스레드의 우선 순위를 지정할 수 있다.

getPriority() 메소드로 스레드의 우선 순위를 얻어올 수 있다.

.currentThread()  현재 스레드 객체를 만든다.

.getName() 메소드로 스레드 이름을 얻어올 수 있다.

.setName() 메소드로 스레드 이름을 지정할 수 있다.

스레드 이름을 지정하려면..

스레드 이름을 넘겨받는 생성자를 만들고 Thread(부모) 클래스의 생성자를 호출해서 넣어주면 된다. 

join() 메소드는 동시에 2개이상의 스레드가 실행 될 때 다른 스레드의 결과를 참조해서 실행해야 할 경우 사용한다.

join() 메소드를 실행한 스레드가 끝나기를 기다렸다가 실행한다. 

Thread.sleep(1) 대신 sleep(1) 가능.

(Thread 클래스를 상속받아 모든 기능을 가지고 있으므로,)

# 공유영역

공유영역을 만드는 방법 ① private 일 시, 사용 불가  

공유해서 사용할 클래스 객체를 선언하고 생성된 공유 영역의 주소를 넣어준다

CalculatorThread calculator = new CalculatorThread;

②생성자로 넣어준다 

③setter 

※ 공유영역 Test

공유하는 객체의 값을 바꾼 다음 두 쪽 다 바뀌었는지 확인 

# 동기화 블록(synchronized)

동기화란 ? 작업의 순서를 정한다는 의미. 공유 영역을 사용하는 스레드가 실행 중 일때 같은 공유 영역을 사용하는 다른 스레드가 실행되지 못하도록 하는 것 ⇒ 스레드 동기화 

동기화 블록에는 절대로 스레드 사이에서 작업 전환이 이루어지면 안되는 내용을 넣는다 

얼음(wait), 땡(notify, notifyAll)

wait() 메소드 : 현재 스레드를 다른 스레드에서 깨울 때 까지 멈춘다. 

                  정지된 스레드는 다른 스레드에서 깨운다 (notify, notifyAll)

notify() 메소드 : wait() 메소드로 일시 정지 된 스레드를 임의의 순서로 깨운다 

notifyAll() 메소드 : 일시정지된 모든 스레드를 일괄적으로 깨운다. 

⇒ wait(), notify(), notifyAll() 메소드는 모두 동기화(Synchronized) 블록 내부에 코딩 해야 한다. 

▼—————————————————————————————————

1. tostring 이유 

하지만 만일 객체의 이름이나 주소값이 아닌 **객체의 고유 정보를 출력**하고 싶을 때가 있다.

예를 들어 다음 Person 객체를 출력하면 원론적인 값이 아닌, Person의 이름이나 나이 같은 고유 정보를  출력하고 싶을 때 바로 오버라이딩(Overriding)을 통해 ~~toString()~~ 메소드를 재정의 해주면 된다.

1. interpace a {} 표시 인터페이스
2. 기본 자료형을 선언한 변수 :  일반 변수 , 클래스로 선언한 변수(객체, 인스턴스) : 참조 변수 
3. 일반 변수는 데이터 자체를 기억하지만 클래스로 만든 객체는 생성된 크기를 특정지을 수 없으므로, 객체가 생성된 시작 주소를 기억한다.

[catch 밑 문장인 e.printStackTrace () = **에러 메세지의 발생 근원지를 찾아서 단계별로 에러를 출력 한다**
.](https://www.notion.so/catch-e-printStackTrace-0286a211d13f4114b72a1cea480df09f)
