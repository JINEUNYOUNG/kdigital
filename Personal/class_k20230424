# k20230424

# Interface

- 인터페이스는 클래스나 프로그램이 제공하는 기능을 명시적으로 선언한다.
- 클라이언트 코드와의 약속,
- 클라이언트 프로그램은 인터페이스에 선언된 메소드나 명세만 보고 이를 구현한 클래스를 사용할 수 있다.
- 인터페이스로 구현한 다양한 객체를 생성한다 = > 다형성

 1.  상수는 대문자

1. public static final 은 생략해도 붙여준다.
2. *public abstract은 생략해도 붙여준다.*
3. final 선언할 때는 바로 초기화해야 된다.
4. 클래스에서 인터페이스를 받으려면 implements
5. 인터페이스 내 추상메서드가 있으면 상속 받을 때 반드시 오버라이드 해야 한다.
6. **공통적으로 쓸 메서드는 오버라이드 하고 각기 다르게 쓸 메서드는 또 상속 받아 쓴다. ⇒ 추상메서드로 바꿔놔야 됨 
7. 클래스 만들 때 상속 받기를 선택하면 자동 오버라이드까지 해줌
8. VO클래스(Value Object) 
    
    : 값을 가지는 객체. 사용자 정보(1인의 여러 데이터)와 데이터를 처리할 메소드가 저장되는 클래스 =DTO
    
    불변. SETTER를 허용하지 않는다 (GETTER 가능)
    private 속성을 가지며 다른 VO와 비교할 수 있다
    (여러 VO들이 주소값이 모두 달라도 값이 같으면 동등한 객체)
    equlas()로 비교할때 객체의 모든 값을 비교해야 한다
    
9. DAO클래스
    
    Data Access Object 데이터베이스에 접근해서 sql 명령을 실행하는 클래스 
    커넥션을 하나만 두고 여러 user가 dao의 인터페이스를 사용해 자료에 접근하도록 하는 것 
    DB에 대한 insert, update, delete, select를 처리한다(기능을 구현 해놓고 상속을 받아 사용)
    
10. db.properties
    
    DB에 대한 연결 정보를 파일로 저장해 놓고 사용하는 용도로 가장 많이 쓰임 properties에디터가 있으면 한글도 쓸수 있음 ~~쓸 일은 잘 없음~~
    

1. <>은 클래스의 타입을 받는 것
